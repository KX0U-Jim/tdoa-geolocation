name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libusb-1.0-0-dev pkg-config
    
    - name: Build librtlsdr-2freq
      run: |
        git clone https://github.com/DC9ST/librtlsdr-2freq.git
        cd librtlsdr-2freq
        mkdir build && cd build
        cmake ..
        make -j$(nproc)
        # Verify dual-frequency support
        ./src/rtl_sdr --help 2>&1 | grep -q '\-f.*\-h' || exit 1
    
    - name: Build collector (amd64)
      if: matrix.arch == 'amd64'
      run: |
        go mod init tdoa-collector
        go build -o collector-linux-amd64 collector.go
        go build -o reader-linux-amd64 reader.go
    
    - name: Build collector (arm64)
      if: matrix.arch == 'arm64'
      run: |
        go mod init tdoa-collector
        GOARCH=arm64 go build -o collector-linux-arm64 collector.go
        GOARCH=arm64 go build -o reader-linux-arm64 reader.go
    
    - name: Test collector binary
      if: matrix.arch == 'amd64'
      run: |
        ./collector-linux-amd64 2>&1 | grep -q "Usage:" || exit 1
        ./reader-linux-amd64 2>&1 | grep -q "Usage:" || exit 1
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.arch }}
        path: |
          collector-linux-${{ matrix.arch }}
          reader-linux-${{ matrix.arch }}
          librtlsdr-2freq/build/src/rtl_sdr
        retention-days: 30

  test-deployment:
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test deployment script
      run: |
        # Test deployment script syntax
        bash -n deploy.sh
        
        # Test with dry-run mode (if we add it)
        # ./deploy.sh --dry-run

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-linux, test-deployment]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release package
      run: |
        mkdir -p release/bin release/docs
        cp binaries-amd64/* release/bin/
        cp binaries-arm64/* release/bin/
        cp -r docs/* release/docs/
        cp README.md LICENSE deploy.sh release/
        tar -czf tdoa-geolocation-${{ github.ref_name }}.tar.gz release/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          tdoa-geolocation-${{ github.ref_name }}.tar.gz
        body: |
          ## TDOA Geolocation System Release ${{ github.ref_name }}
          
          ### Features
          - Dual-frequency RTL-SDR data collection
          - FM audio pattern matching for reference signals
          - Cross-platform support (x86_64, ARM64/Pi)
          - Comprehensive data validation tools
          
          ### Installation
          1. Download and extract the release package
          2. Run `./deploy.sh` on each collector station
          3. See docs/ for detailed setup instructions
          
          ### Hardware Requirements
          - RTL-SDR V4/V5 with TCXO
          - 3 collector stations (Pi 4+ or x86_64 Linux)
          - Triangle formation for optimal geometry
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}